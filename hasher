#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>
#include <sstream>
#include <vector>
#include <openssl/evp.h>

/**
 * Calculate SHA-256 hash of a file using OpenSSL 3.0 API
 * @param filename Path to the file
 * @return Hexadecimal string representation of the hash
 */
std::string calculateFileHash(const std::string& filename) {
    std::ifstream file(filename, std::ios::binary);
    if (!file) {
        throw std::runtime_error("Unable to open file: " + filename);
    }

    // Initialize the digest context
    EVP_MD_CTX* context = EVP_MD_CTX_new();
    if (!context) {
        throw std::runtime_error("Failed to create digest context");
    }

    // Initialize the digest
    if (1 != EVP_DigestInit_ex(context, EVP_sha256(), nullptr)) {
        EVP_MD_CTX_free(context);
        throw std::runtime_error("Failed to initialize digest");
    }

    const size_t bufferSize = 4096;
    std::vector<unsigned char> buffer(bufferSize);
    
    // Process the file in chunks
    while (file) {
        file.read(reinterpret_cast<char*>(buffer.data()), bufferSize);
        size_t bytesRead = file.gcount();
        
        if (bytesRead > 0) {
            if (1 != EVP_DigestUpdate(context, buffer.data(), bytesRead)) {
                EVP_MD_CTX_free(context);
                throw std::runtime_error("Failed to update digest");
            }
        }
    }

    // Finalize the digest
    unsigned char hash[EVP_MAX_MD_SIZE];
    unsigned int hashLength = 0;
    
    if (1 != EVP_DigestFinal_ex(context, hash, &hashLength)) {
        EVP_MD_CTX_free(context);
        throw std::runtime_error("Failed to finalize digest");
    }
    
    // Free the context
    EVP_MD_CTX_free(context);

    // Convert the hash to a hexadecimal string
    std::stringstream hashStream;
    for (unsigned int i = 0; i < hashLength; i++) {
        hashStream << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(hash[i]);
    }

    return hashStream.str();
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " <filename>" << std::endl;
        return 1;
    }

    try {
        std::string filename = argv[1];
        std::string fileHash = calculateFileHash(filename);
        std::cout << "SHA-256 hash of file '" << filename << "':" << std::endl;
        std::cout << fileHash << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}
